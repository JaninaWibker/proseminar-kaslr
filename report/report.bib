%%
%% Example BiBTeX file.  The file includes most publications from the
%% Karlsruhe System Architecture Group.  If you are using Emacs, it is
%% strongly suggested to use bibtex-mode for editing the entries.
%%

%%
%% Use predefined strings to help make BibTeX entries consistent.
%%

@string{cacm = "Communications of the ACM"}
@string{acmosr = "ACM Operating Systems Review"}

@string{sosp14 = "Proceedings of the 14th Symposium on Operating System
                  Principles"}
@string{sosp15 = "Proceedings of the 15th Symposium on Operating System
                  Principles"}
@string{sosp16 = "Proceedings of the 16th Symposium on Operating System
                  Principles"}
@string{sosp17 = "Proceedings of the 17th Symposium on Operating System
                  Principles"}
@string{sosp19 = "Proceedings of the 19th Symposium on Operating System
                 Principles"}

@string{osdi1 = "Proceedings of the 1st Symposium on Operating Systems
                  Design and Implementation"}

@string{osdi3 = "Proceedings of the 4th Symposium on Operating Systems
                  Design and Implementation"}


@string{osdi4 = "Proceedings of the 4th Symposium on Operating Systems
                  Design and Implementation"}

@string{osdi5 = "Proceedings of the 5th Symposium on Operating Systems
                  Design and Implementation"}

@string{osdi6 = "Proceedings of the 6th Symposium on Operating Systems
                  Design and Implementation"}

@string{hotos6 = "Proceedings of 6th Workshop on Hot Topics in
                  Operating Systems"}
@string{hotos7 = "Proceedings of 7th Workshop on Hot Topics in
                  Operating Systems"}
@string{hotos8 = "Proceedings of 8th Workshop on Hot Topics in
                  Operating Systems"}

@string{eurosigops7 = "Proceedings of the 7th ACM SIGOPS European
                  Workshop"}
@string{eurosigops8 = "Proceedings of the 8th ACM SIGOPS European
                  Workshop"}
@string{eurosigops9 = "Proceedings of the 9th ACM SIGOPS European
                  Workshop"}
@string{eurosigops11 = "Proceedings of the 11th ACM SIGOPS European
                  Workshop"}

@string{iwooos5 = "Proceedings of the 5th IEEE International Workshop
                  on Object-Orientation in Operating Systems"}

@string{vm04 = "Proceedings of the 3rd Virtual Machine Research \&
                  Technology Symposium"}

@string{acsac6 = "Proceedings of the 6th Asia-Pacific Computer Systems
                  Architecture Conference"}
@string{acsac8 = "Proceedings of the 8th Asia-Pacific Computer Systems
                  Architecture Conference"}
@string{acsac9 = "Proceedings of the 9th Asia-Pacific Computer Systems
                  Architecture Conference"}

@string{usenix1998 = "Proceedings of the USENIX 1998 Annual Technical
                  Conference"}

@string{usenix2003 = "Proceedings of the USENIX 2003 Annual Technical Conference"}

@string{usenixsec7 = "Proceedings of the 7th USENIX Security
                  Symposium"}

@string{wiess1 = "Proceedings of the 1st Workshop on Industrial
                  Experiences with Systems Software"}

@string{asplos10 = "Proceedings of the 10th International Conference on 
		    Architectural Support for Programming Languages and Operating Systems"}

@string{asplos11 = "Proceedings of the 11th International Conference on
                    Architectural Support for Programming Languages and Operating Systems"}

@string{asplos12 = "Proceedings of the 12th International Conference on
                    Architectural Support for Programming Languages and Operating Systems"}

%%
%% It's a good idea to keep BibTeX entries sorted alphabetically.
%%

@misc{drk,
  author = {Yeongjin Jang and Sangho Lee and Taesoo Kim},
  title = {Breaking Kernel Address Space Layout Randomization with Intel TSX},
  year = {2016},
  isbn = {9781450341394},
  publisher = {Association for Computing Machinery},
  address = {New York, NY, USA},
  howpublished = {\url{https://doi.org/10.1145/2976749.2978321}},
  doi = {10.1145/2976749.2978321},
  abstract = {Kernel hardening has been an important topic since many applications and security mechanisms often consider the kernel as part of their Trusted Computing Base (TCB). Among various hardening techniques, Kernel Address Space Layout Randomization (KASLR) is the most effective and widely adopted defense mechanism that can practically mitigate various memory corruption vulnerabilities, such as buffer overflow and use-after-free. In principle, KASLR is secure as long as no memory leak vulnerability exists and high entropy is ensured.In this paper, we introduce a highly stable timing attack against KASLR, called DrK, that can precisely de-randomize the memory layout of the kernel without violating any such assumptions. DrK exploits a hardware feature called Intel Transactional Synchronization Extension (TSX) that is readily available in most modern commodity CPUs. One surprising behavior of TSX, which is essentially the root cause of this security loophole, is that it aborts a transaction without notifying the underlying kernel even when the transaction fails due to a critical error, such as a page fault or an access violation, which traditionally requires kernel intervention. DrK turned this property into a precise timing channel that can determine the mapping status (i.e., mapped versus unmapped) and execution status (i.e., executable versus non-executable) of the privileged kernel address space. In addition to its surprising accuracy and precision, DrK is universally applicable to all OSes, even in virtualized environments, and generates no visible footprint, making it difficult to detect in practice. We demonstrated that DrK can break the KASLR of all major OSes (i.e., Windows, Linux, and OS X) with near-perfect accuracy in under a second. Finally, we propose potential countermeasures that can effectively prevent or mitigate the DrK attack.We urge our community to be aware of the potential threat of having Intel TSX, which is present in most recent Intel CPUs -- 100% in workstation and 60% in high-end Intel CPUs since Skylake -- and is even available on Amazon EC2 (X1).},
  booktitle = {Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security},
  pages = {380-392},
  numpages = {13},
  keywords = {attacks, hardware security, system security},
  location = {Vienna, Austria},
  series = {CCS '16}
}

@misc{drk-attack-proof-of-concept-github,
  author = {Yeongjin Jang, Sangho Lee and Taesoo Kim},
  title = {The DrK Attack - Proof of concept},
  howpublished = {\url{https://github.com/sslab-gatech/DrK}}
}

@misc{kaiser,
  author = {Daniel Gruss and Moritz Lipp and Michael Schwarz and Richard Fellner and Clémentine Maurice and Stefan Mangard},
  title = {KASLR is Dead: Long Live KASLR},
  year = {2017},
  month = {06},
  pages = {161-176},
  howpublished = {\url{https://gruss.cc/files/kaiser.pdf}},
  abstract = {Modern operating system kernels employ address space layout randomization (ASLR) to prevent control-flow hijacking attacks and code-injection attacks. While kernel security relies fundamentally on preventing access to address information, recent attacks have shown that the hardware directly leaks this information. Strictly splitting kernel space and user space has recently been proposed as a theoretical concept to close these side channels. However, this is not trivially possible due to architectural restrictions of the x86 platform.},
  isbn = {978-3-319-62104-3},
  doi = {10.1007/978-3-319-62105-0_11},
  booktitle = {Engineering Secure Software and Systems}
}

@misc{meltdown,
  author = {Lipp, Moritz and Schwarz, Michael and Gruss, Daniel and Prescher, Thomas and Haas, Werner and Fogh, Anders and Horn, Jann and Mangard, Stefan and Kocher, Paul and Genkin, Daniel and Yarom, Yuval and Hamburg, Mike},
  title = {Meltdown: Reading Kernel Memory from User Space},
  year = {2018},
  isbn = {9781931971461},
  doi = {10.5555/3277203.3277276},
  publisher = {USENIX Association},
  abstract = {The security of computer systems fundamentally relies on memory isolation, e.g., kernel address ranges are marked as non-accessible and are protected from user access. In this paper, we present Meltdown. Meltdown exploits side effects of out-of-order execution on modern processors to read arbitrary kernel-memory locations including personal data and passwords. Out-of-order execution is an indispensable performance feature and present in a wide range of modern processors. The attack is independent of the operating system, and it does not rely on any software vulnerabilities. Meltdown breaks all security guarantees provided by address space isolation as well as paravirtualized environments and, thus, every security mechanism building upon this foundation. On affected systems, Meltdown enables an adversary to read memory of other processes or virtual machines in the cloud without any permissions or privileges, affecting millions of customers and virtually every user of a personal computer. We show that the KAISER defense mechanism for KASLR has the important (but inadvertent) side effect of impeding Meltdown. We stress that KAISER must be deployed immediately to prevent large-scale exploitation of this severe information leakage.},
  booktitle = {Proceedings of the 27th USENIX Conference on Security Symposium},
  pages = {973-990},
  numpages = {18},
  series = {SEC'18},
  howpublished = {\url{https://meltdownattack.com/meltdown.pdf}}
}

@misc{intel-tsx-overview,
  author = {Intel},
  title = {Intel® Transactional Synchronization Extensions (Intel® TSX) Overview},
  howpublished = {\url{https://www.intel.com/content/www/us/en/docs/cpp-compiler/developer-guide-reference/2021-8/tsx-programming-considerations-ov.html}}
}
